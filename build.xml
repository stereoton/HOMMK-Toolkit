<?xml version="1.0"?>
<project name="yui-compressor-ant-task-hktoolkit" default="dist">
	<description>HkToolkit ant tasks.</description>
	<import file="ant.xml" />

	<property file="build.properties" />

	<path id="task.classpath">
		<pathelement location="${yuicompressor.jar}" />
		<pathelement location="${yuicompressor-ant-task.jar}" />
	</path>

	<target name="banner">
		<echo message="***************************************" />
		<echo message="********* Building HkToolkit **********" />
		<echo message="***************************************" />
		<echo message="* build.version:      ${build.version}" />
		<echo message="* Ant version:        ${ant.version}" />
		<echo message="* Java version:       ${java.version}" />
		<echo message="***************************************" />
	</target>

	<target name="check-task-jar-is-present"
	        description="Checks if the required ant task jar exists in the expected dir">
		<available file="${yuicompressor-ant-task.jar}"
		           property="task.jar.present" />
	</target>

	<target name="define-ant-task" if="task.jar.present">
		<taskdef name="yui-compressor"
		         classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
			<classpath refid="task.classpath" />
		</taskdef>
	</target>

	<target name="fail-build" unless="task.jar.present">
		<fail>Cannot find the required ant task jar file.
    ======================================================================================
    Cannot find yui-compressor-ant-task-${build.version}.jar file in ${parent.dist.dir}.
    ======================================================================================
    </fail>
	</target>

	<target name="init"
	        description="Initializes directory layout and shows banner"
	        depends="check-task-jar-is-present,define-ant-task,fail-build">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${tmp.dir}" />
	</target>

	<target name="dist"
	        description="Prepares files for distribution"
	        depends="banner,build,copy-and-minify-libs" />

	<target name="clean" depends="init" description="Removes all build artefacts">
		<delete dir="${dist.dir}" />
		<delete dir="${build.dir}" />
		<delete dir="${tmp.dir}" />
	</target>

	<target name="clean-pagescope" />

	<target name="pagescope-uuid" depends="init" />
	<target name="pagescope-minify" />

	<target name="pagescope-start" depends="pagescope-uuid" />
	<target name="pagescope-main" depends="pagescope-uuid,pagescope-minify" />
	<target name="pagescope-end" depends="pagescope-uuid" />

	<macrodef name="minify">
		<attribute name="pkg" />
		<attribute name="srcdir" />
		<attribute name="targetdir" default="" />
		<attribute name="includes" default="*.*" />
		<attribute name="tmpdir" default="${tmp.dir}/@{pkg}/minify/" />
		<element name="include" />
		<sequential>
			<local name="minify.target.dir" />
			<local name="minify.target.location" />
			<condition property="minify.target.dir"
			           value="@{targetdir}"
			           else="@{srcdir}">
				<length string="@{targetdir}" when="greater" length="0" />
			</condition>
			<property name="minify.target.location" location="${minify.target.dir}" />

			<echo message="Lege das temporäre Verzeichnis @{tmpdir} an" />
			<mkdir dir="@{tmpdir}" />

			<echo message="Kopiere Daten aus @{srcdir} in das temporäre Verzeichnis @{tmpdir}" />
			<copy todir="@{tmpdir}">
				<fileset dir="@{srcdir}" includes="@{includes}" />
			</copy>

			<echo message="Komprimiere Daten von @{tmpdir} nach ${minify.target.location}: @{includes}" />
			<yui-compressor warn="false"
			                munge="true"
			                jsSuffix=".js"
			                cssSuffix=".css"
			                preserveAllSemiColons="false"
			                fromDir="@{tmpdir}"
			                toDir="${minify.target.dir}">
				<include />
				<exclude />
			</yui-compressor>

			<echo message="Lösche das temporäre Verzeichnis @{tmpdir}" />
			<delete dir="@{tmpdir}" />
		</sequential>
	</macrodef>

	<target name="hk.replace.checkGeneric" if="pkg">
		<echo message="Prüfe Ersetzungs-Parameter für ${pkg} als hk.replace.${pkg}.checkGeneric.checked: ${target}" />
		<condition property="replace.${pkg}.checkGeneric.checked" value="true">
			<and>
				<isset property="replace" />
				<length string="${replace}" length="0" when="greater" />
			</and>
		</condition>
	</target>
	<target name="hk.replace.checkTarget" if="pkg">
		<echo message="Prüfe Ersetzungs-Parameter für ${pkg} als hk.replace.${pkg}.checkTarget.checked: ${target}" />
		<condition property="replace.${pkg}.checkTarget.checked" value="true">
			<and>
				<isset property="target" />
				<length string="${target}" length="0" when="greater" />
			</and>
		</condition>
	</target>
	<target name="hk.replace.checkPattern" depends="" if="pkg">
		<echo message="Prüfe Ersetzungs-Parameter für ${pkg} als hk.replace.${pkg}.checkPattern.checked: ${target}" />
		<condition property="hk.replace.${pkg}.checkPattern.checked" value="true">
			<and>
				<isset property="dir" />
				<length string="${dir}" length="0" when="greater" />
				<isset property="filepattern" />
				<length string="${filepattern}" length="0" when="greater" />
				<not>
					<or>
						<isset property="target" />
						<length string="${target}" length="0" when="greater" />
					</or>
				</not>
			</and>
		</condition>
	</target>
	<target name="hk.replace.byTarget"
	        depends="hk.replace.checkTarget"
	        if="hk.replace.${pkg}.checkTarget.checked"
	        description="Properties: search, replace, value, dir">
		<echo message="Ersetze ${search} durch ${replace} in ${dir}/${target}..." />
		<replace dir="${dir}"
		         file="${target}"
		         token="${search}"
		         value="${replace}" />
	</target>
	<!-- pkg, dir, file, search, replace -->
	<target name="hk.replace.byPattern"
	        depends="hk.replace.checkPattern"
	        if="replace"
	        unless="hk.replace.${pkg}.checkPattern.checked">
		<!--<echo message="${pkg}: Ersetze ${search} durch ${replace} in ${dir}/${filepattern}..." />-->
		<replace dir="${dir}"
		         includes="${filepattern}"
		         token="${search}"
		         value="${replace}" />
	</target>
	<!-- pkg, target, dir, file, search, replace -->
	<target name="hk.replace.doReplace"
	        if="replace"
	        depends="hk.replace.byTarget,hk.replace.byPattern">
		<!--<echo message="${pkg}: Ersetze ${search} durch ${replace} in ${target} - ${dir}/${filepattern}..." />-->
	</target>

	<macrodef name="hk.replace.replaceOne">
		<attribute name="pkg" />
		<attribute name="search" />
		<attribute name="replace" />
		<attribute name="dir" />
		<attribute name="target" default="" />
		<attribute name="filepattern" default="*.*" />
		<sequential>
			<local name="replace" />
			<cpprop name="replace" from="@{replace}" />
			<antcall target="hk.replace.doReplace">
				<param name="pkg" value="@{pkg}" />
				<param name="search" value="@{search}" />
				<param name="replace" value="${replace}" />
				<param name="target" value="@{target}" />
				<param name="dir" value="@{dir}" />
				<param name="filepattern" value="@{filepattern}" />
			</antcall>
		</sequential>
	</macrodef>
	<target name="hk.replace.placeholders"
	        description="Properties: pkg, dir, filepattern, target">
		<local name="hk.replace.filepattern" />
		<condition property="hk.replace.filepattern"
		           value="${filepattern}"
		           else="*.*">
			<and>
				<isset property="filepattern" />
				<length string="${filepattern}" length="0" when="greater" />
			</and>
		</condition>
		<hk.replace.replaceOne pkg="${pkg}"
		                       search="$$Debug$$"
		                       replace="hk.debug"
		                       target="${target}"
		                       dir="${dir}"
		                       filepattern="${hk.replace.filepattern}" />
		<hk.replace.replaceOne pkg="${pkg}"
		                       search="$$WebFonts$$"
		                       replace="hk.webfonts"
		                       target="${target}"
		                       dir="${dir}"
		                       filepattern="${hk.replace.filepattern}" />
		<hk.replace.replaceOne pkg="${pkg}"
		                       search="$$LoaderConditions$$"
		                       replace="hk.${pkg}.loader.conditions"
		                       target="${target}"
		                       dir="${dir}"
		                       filepattern="${hk.replace.filepattern}" />
		<hk.replace.replaceOne pkg="${pkg}"
		                       search="$$Description$$"
		                       replace="hk.${pkg}.description"
		                       target="${target}"
		                       dir="${dir}"
		                       filepattern="${hk.replace.filepattern}" />
		<hk.replace.replaceOne pkg="${pkg}"
		                       search="$$Name$$"
		                       replace="hk.${pkg}.name"
		                       target="${target}"
		                       dir="${dir}"
		                       filepattern="${hk.replace.filepattern}" />
		<hk.replace.replaceOne pkg="${pkg}"
		                       search="$$Icon$$"
		                       replace="hk.${pkg}.icon"
		                       target="${target}"
		                       dir="${dir}"
		                       filepattern="${hk.replace.filepattern}" />
		<hk.replace.replaceOne pkg="${pkg}"
		                       search="$$Opacity$$"
		                       replace="hk.opacity"
		                       target="${target}"
		                       dir="${dir}"
		                       filepattern="${hk.replace.filepattern}" />
		<echo message="${pkg}: Ersetze die Versionsplatzhalter in ${dir}/${hk.replace.filepattern}..." />
		<git-replace-all-versions dir="${dir}"
		                          filepattern="${hk.replace.filepattern}"
		                          pkg="${pkg}" />
	</target>

	<macrodef name="git-replace-version">
		<attribute name="pkg" />
		<attribute name="currentVersion" />
		<attribute name="dir" default="${src.dir}" />
		<attribute name="filePattern" default="*.*" />
		<attribute name="versionPattern" default="$$Version$$" />
		<sequential>
			<echo message="Ersetze @{versionPattern} durch @{currentVersion} in @{dir}..." />
			<replace dir="@{dir}" token="@{versionPattern}" value="@{currentVersion}">
				<include name="@{filePattern}" />
			</replace>
		</sequential>
	</macrodef>
	<macrodef name="git-replace-all-versions">
		<attribute name="pkg" />
		<attribute name="dir" default="${src.dir}" />
		<attribute name="filePattern" default="*.*" />
		<attribute name="tmpdir" default="${tmp.dir}/@{pkg}/git" />
		<sequential>
			<echo message="Rufe aktuelle Version von @{pkg} ab" />
			<local name="git.version" />
			<local name="git.error" />
			<local name="git.result" />
			<exec executable="git-currentversion"
			      dir="${basedir}"
			      searchpath="true"
			      outputproperty="git.version"
			      errorproperty="git.error"
			      resultproperty="git.result" />

			<echo message="Lege temporäres Verzeichnis @{tmpdir} an..." />
			<mkdir dir="@{tmpdir}" />

			<echo message="Schreibe aktuelle Version von @{pkg} in Properties-Datei: ${git.version}" />
			<echoproperties destfile="@{tmpdir}/currentversion"
			                prefix="git.version" />

			<echo message="Ersetze $$Version$$ für @{pkg} in @{dir}/@{filepattern}: ${git.version}" />
			<git-replace-version pkg="@{pkg}"
			                     dir="@{dir}"
			                     filepattern="@{filepattern}"
			                     versionpattern="$$Version$$"
			                     currentversion="@@version ${git.version}" />

			<echo message="Ersetze $$VersionString$$ für @{pkg} in @{dir}/@{filepattern}: ${git.version}" />
			<git-replace-version pkg="@{pkg}"
			                     dir="@{dir}"
			                     filepattern="@{filepattern}"
			                     versionpattern="$$VersionString$$"
			                     currentversion="${git.version}" />

			<delete dir="@{tmpdir}" />
		</sequential>
	</macrodef>

	<target name="gm.check" if="pkg">
		<echo message="Prüfe Greasemonkey-Parameter für ${pkg} als gm.${pkg}.checked: ${target}, $${hk.${pkg}.gm.enabled}" />
		<local name="testVal" />
		<cpprop name="testVal" from="hk.${pkg}.gm.enabled" />
		<condition property="gm.${pkg}.checked" value="true">
			<and>
				<isset property="target" />
				<length string="${target}" length="0" when="greater" />
				<istrue value="${testVal}" />
			</and>
		</condition>
	</target>
	<target name="gm.insert" depends="gm.check" if="gm.${pkg}.checked">
		<echo message="Ergänze Greasemonkey-Kopf in ${target}..." />
		<local name="gm.tmp.dir" />
		<local name="gm.tmp.file" />
		<local name="gm.tmp.target" />
		<property name="gm.tmp.dir" location="${tmp.dir}/${pkg}/gm" />
		<property name="gm.tmp.file" value="gm-head-${pkg}.js" />
		<property name="gm.tmp.target" location="${gm.tmp.dir}/${gm.tmp.file}" />
		<local name="nameVal" />
		<cpprop name="nameVal" from="hk.${pkg}.name" />
		<condition property="hk.${pkg}.name" value="${nameVal}" else="${pkg}">
			<and>
				<isset property="hk.${pkg}.name" />
				<length string="${nameVal}" length="0" when="greater" />
			</and>
		</condition>
		<echo message="Erzeuge temporäres Verzeichnis ${gm.tmp.dir}..." />
		<mkdir dir="${gm.tmp.dir}" />
		<echo message="Kopiere das Greasemonkey-Template nach ${gm.tmp.target}..." />
		<copy file="${gm.location}" tofile="${gm.tmp.target}" />
		<echo message="Ersetze die Platzhalter in ${gm.tmp.target}..." />
		<!-- 
		Properties: 
		rpl.pkg, rpl.name, rpl.description, rpl.icon, rpl.dir, 
		rpl.loaderConditions, rpl.filepattern, rpl.target 
		-->
		<antcall target="hk.replace.placeholders">
			<param name="pkg" value="${pkg}" />
			<param name="dir" value="${gm.tmp.dir}" />
			<param name="filepattern" value="${gm.tmp.file}" />
			<param name="target" value="${gm.tmp.target}" />
		</antcall>
		<echo message="Kopiere das Greasemonkey-Template nach ${target}..." />
		<copy file="${gm.tmp.target}" tofile="${target}" />
		<echo message="Lösche das temporäre Verzeichnis ${gm.tmp.dir}..." />
		<delete dir="${gm.tmp.dir}" />
	</target>

	<target name="ps.check" if="pkg">
		<echo message="Prüfe PageScopeRunner-Parameter für ${pkg}..." />
		<local name="ps.enabled" />
		<cpprop name="ps.enabled" from="hk.${pkg}.ps.enabled" />
		<condition property="ps.${pkg}.checked">
			<and>
				<isset property="hk.${pkg}.ps.enabled" />
				<istrue value="${ps.enabled}" />
			</and>
		</condition>
	</target>
	<!-- pkg, file, target, result -->
	<target name="ps.insert" depends="ps.check" if="ps.${pkg}.checked">
		<echo message="Ergänze PageScopeRunner in ${target}..." />
		<local name="ps.tmp.dir" />
		<local name="ps.location" />
		<local name="ps.uuid" />
		<local name="ps.error" />
		<property name="ps.tmp.dir" location="${tmp.dir}/${pkg}/pstmp" />
		<property name="ps.location" location="${target}" />
		<exec executable="uuidvargen"
		      errorproperty="ps.error"
		      outputproperty="ps.uuid" />
		<echo level="verbose" message="Erzeuge PageScopeRunner ${ps.uuid}" />
		<echo level="debug"
		      message="Verwendet PageScopeRunner-Templates in ${ps.dir}..." />
		<echo level="info"
		      message="Lege das temporäre Verzeichnis ${ps.tmp.dir} an" />
		<mkdir dir="${ps.tmp.dir}" />
		<echo level="info"
		      message="Kopiere ${psr_main} in das temporäre Verzeichnis ${ps.tmp.dir}..." />
		<copy todir="${ps.tmp.dir}" file="${ps.dir}/${psr_main}" />
		<echo level="debug"
		      message="Ersetze __PAGE_SCOPE_RUN__ durch __PAGE_SCOPE_${ps.uuid}_RUN__ in ${ps.tmp.dir}" />
		<replace file="${ps.tmp.dir}/${psr_main}"
		         value="__PAGE_SCOPE_${ps.uuid}_RUN__"
		         token="__PAGE_SCOPE_RUN__" />
		<echo level="info" message="Komprimiere ${ps.tmp.dir}/${psr_main}..." />
		<!-- pkg,destdir,(srcdir,includes|location) -->
		<antcall target="yui.compress">
			<param name="pkg" value="${pkg}" />
			<param name="srcdir" value="${ps.tmp.dir}" />
			<param name="includes" value="${psr_main}" />
			<!--<param name="includes" />-->
		</antcall>

		<!--<minify pkg="${ps.pkg}" srcdir="${ps.tmp.dir}">
			<include name="${psr_main}" />
		</minify>-->
		<echo level="info"
		      message="Kopiere ${psr_start} in das temporäre Verzeichnis ${ps.tmp.dir}..." />
		<copy todir="${ps.tmp.dir}" file="${ps.dir}/${psr_start}" />
		<echo level="debug"
		      message="Ersetze __PAGE_SCOPE_RUN__ durch __PAGE_SCOPE_${ps.uuid}_RUN__ in ${ps.tmp.dir}" />
		<replace file="${ps.tmp.dir}/${psr_start}"
		         value="__PAGE_SCOPE_${ps.uuid}_RUN__"
		         token="__PAGE_SCOPE_RUN__" />
		<echo level="info"
		      message="Kopiere ${psr_end} in das temporäre Verzeichnis ${ps.tmp.dir}..." />
		<copy todir="${ps.tmp.dir}" file="${ps.dir}/${psr_end}" />
		<echo level="info" message="Schreibe PageScopeRunner nach ${ps.location}" />
		<concat destfile="${ps.location}" append="false" force="true">
			<fileset dir="${ps.tmp.dir}" includes="*_page_scope_runner*.js" />
		</concat>
		<echo level="info"
		      message="Entferne das temporäre Verzeichnis ${ps.tmp.dir}..." />
		<delete dir="${ps.tmp.dir}" />
	</target>

	<target name="yui.check" if="pkg">
		<echo message="Prüfe YUI Compressor-Parameter für ${pkg}..." />
		<local name="yui.enabled" />
		<cpprop name="yui.enabled" from="hk.${pkg}.yui.enabled" />
		<condition property="yui.${pkg}.checked">
			<and>
				<or>
					<isset property="location" />
					<and>
						<isset property="srcdir" />
						<isset property="includes" />
					</and>
				</or>
				<istrue value="${yui.enabled}" />
			</and>
		</condition>
	</target>
	<target name="yui.compress"
	        depends="yui.check"
	        if="yui.${pkg}.checked"
	        description="Parameters: pkg,destdir,(srcdir,includes|location)">
		<local name="yui.tmp.dir" />
		<local name="yui.target.location" />
		<local name="yui.src.includes" />
		<condition property="yui.src.includes" value="${includes}" else="*.*">
			<length string="${includes}" when="greater" length="0" />
		</condition>
		<property name="yui.tmp.dir" value="${tmp.dir}/${pkg}/minify/" />
		<local name="yui.target.dir" />
		<condition property="yui.target.dir" value="${destdir}" else="${srcdir}">
			<and>
				<isset property="target" />
				<isset property="destdir" />
				<length string="${destdir}" when="greater" length="0" />
			</and>
		</condition>
		<echo message="${pkg}: yui.target.dir=${yui.target.dir},destdir=${destdir},srcdir=${srcdir},includes=${yui.src.includes}" />
		<property name="yui.target.location" location="${yui.target.dir}" />
		<echo message="Komprimiere ${srcdir}:${yui.src.includes} nach ${yui.target.location}" />

		<echo message="Lege das temporäre Verzeichnis ${yui.tmp.dir} an" />
		<mkdir dir="${yui.tmp.dir}" />

		<echo message="Kopiere Daten aus ${srcdir} in das temporäre Verzeichnis ${yui.tmp.dir}" />
		<copy todir="${yui.tmp.dir}">
			<fileset dir="${srcdir}" includes="${yui.src.includes}" />
		</copy>

		<echo message="Komprimiere Daten von ${yui.tmp.dir} nach ${yui.target.location}: ${yui.src.includes}" />
		<yui-compressor warn="false"
		                munge="true"
		                jsSuffix=".js"
		                cssSuffix=".css"
		                includes="${yui.src.includes}"
		                preserveAllSemiColons="false"
		                fromDir="${yui.tmp.dir}"
		                toDir="${yui.target.location}">
			<!--<fileset dir="${yui.tmp.dir}" includes="${yui.src.includes}" />-->
		</yui-compressor>
		<echo message="Lösche das temporäre Verzeichnis ${yui.tmp.dir}" />
		<delete dir="${yui.tmp.dir}" />
	</target>

	<!-- ld.check - Prüft die Einbindung des Loaders -->
	<target name="ld.check" if="pkg">
		<echo message="Prüfe Loader-Parameter für ${pkg}..." />
		<local name="isEnabled" />
		<cpprop name="isEnabled" from="hk.${pkg}.loader.enabled" />
		<condition property="ld.${pkg}.checked">
			<and>
				<isset property="target" />
				<istrue value="${isEnabled}" />
			</and>
		</condition>
	</target>

	<!-- ld.insert - Bindet den Loader ein -->
	<target name="ld.insert" depends="ld.check" if="ld.${pkg}.checked">
		<echo message="Ergänze ${ld.file} aus ${ld.dir} zu ${target}..." />
		<concat destfile="${target}" append="true" force="true">
			<filelist dir="${ld.dir}" files="${ld.file}" />
		</concat>
	</target>

	<!-- hk.buildparts - Baut die Teile einer Komponente -->
	<macrodef name="hk.buildparts">
		<attribute name="pkg" description="Build package name" />
		<sequential>
			<local name="hk.buildparts.tmp.file" />
			<local name="hk.buildparts.tmp.dir" />
			<local name="hk.buildparts.tmp.location" />
			<property name="hk.buildparts.tmp.file" value="@{pkg}_temp_content.js" />
			<echo message="@{pkg}: Speichere in Datei ${hk.buildparts.tmp.file}.." />
			<property name="hk.buildparts.tmp.dir"
			          value="${hk.@{pkg}.tmp.dir}/hk.buildparts" />
			<echo message="Erzeuge temporäres Verzeichnis ${hk.buildparts.tmp.dir}.." />
			<mkdir dir="${hk.buildparts.tmp.dir}" />
			<property name="hk.buildparts.tmp.location"
			          location="${hk.buildparts.tmp.dir}/${hk.buildparts.tmp.file}" />
			<echo message="@{pkg}: Speichere als ${hk.buildparts.tmp.location}.." />
			<echo message="@{pkg}: Verbinde ${hk.@{pkg}.src.files} aus ${hk.@{pkg}.src.dir} zu ${hk.buildparts.tmp.location}..." />
			<concat destfile="${hk.buildparts.tmp.location}"
			        append="false"
			        force="true">
				<filelist dir="${hk.@{pkg}.src.dir}" files="${hk.@{pkg}.src.files}" />
			</concat>
			<echo message="Ergänze Loader aus ${hk.@{pkg}.src.dir} zu ${hk.buildparts.tmp.location}..." />
			<antcall target="ld.insert">
				<param name="pkg" value="@{pkg}" />
				<param name="target" value="${hk.buildparts.tmp.location}" />
			</antcall>
			<echo message="@{pkg}: Ersetze die Platzhalter in ${hk.buildparts.tmp.location}..." />
			<!-- 
			Properties: 
			rpl.pkg, rpl.name, rpl.description, rpl.icon, rpl.dir, 
			rpl.loaderConditions, rpl.filepattern, rpl.target 
			-->
			<antcall target="hk.replace.placeholders">
				<param name="pkg" value="@{pkg}" />
				<param name="dir" value="${hk.buildparts.tmp.dir}" />
				<param name="filepattern" value="*.*" />
				<param name="target" value="${hk.buildparts.tmp.location}" />
			</antcall>
			<echo message="Komprimiere ${hk.buildparts.tmp.location}..." />
			<antcall target="yui.compress">
				<!-- pgk, srcdir,target,includes -->
				<param name="pkg" value="@{pkg}" />
				<param name="srcdir" value="${hk.buildparts.tmp.dir}" />
				<param name="includes" value="${hk.buildparts.tmp.file}" />
			</antcall>
			<echo message="Rufe ps.insert auf für @{pkg}..." />
			<local name="ps.target" />
			<property name="ps.target"
			          location="${hk.buildparts.tmp.dir}/@{pkg}_pagescope.user.js" />
			<antcall target="ps.insert">
				<param name="pkg" value="@{pkg}" />
				<param name="file" value="@{pkg}_pagescope.user.js" />
				<param name="target" value="${ps.target}" />
				<!--<param name="ps.enabled" value="@{ps.enabled}" />-->
				<param name="result"
				       value="${hk.buildparts.tmp.dir}/${hk.buildparts.tmp.file}" />
			</antcall>
			<echo message="Rufe gm.insert auf für @{pkg}..." />
			<local name="gm.target" />
			<property name="gm.target"
			          location="${hk.buildparts.tmp.dir}/@{pkg}-gm-header.js" />
			<antcall target="gm.insert">
				<param name="pkg" value="@{pkg}" />
				<param name="file" value="@{pkg}_gm.header" />
				<param name="target" value="${gm.target}" />
				<param name="gm.result" value="${hk.buildparts.tmp.location}" />
			</antcall>
			<echo message="Füge Dateien zusammen nach ${hk.@{pkg}.build.location}: ${gm.target},${ps.target},${hk.buildparts.tmp.location}" />
			<concat destfile="${hk.@{pkg}.build.location}" append="false" force="yes">
				<filelist files="${gm.target},${ps.target},${hk.buildparts.tmp.location}" />
			</concat>
			<echo message="Lösche übrig gebliebene Dateien..." />
			<delete file="${gm.target}" />
			<delete file="${ps.target}" />
			<echo message="Lösche Arbeitsdateien aus ${hk.buildparts.tmp.dir}..." />
			<delete dir="${hk.buildparts.tmp.dir}" />
		</sequential>
	</macrodef>

	<!-- hk.build.component - Regeln zum Build einer einzelner Komponente -->
	<macrodef name="hk.build.component"
	          description="Regeln zum Build einer einzelner Komponente">
		<attribute name="pkg" />
		<sequential>
			<local name="tmpdir" />
			<local name="file" />
			<local name="location" />
			<property name="tmpdir" location="${hk.@{pkg}.tmp.dir}" />
			<property name="file" value="${hk.@{pkg}.file}" />
			<property name="location" location="${src.dir}/@{pkg}" />
			<echo message="@{pkg}: Erzeuge temporäres Verzeichnis ${tmpdir}..." />
			<mkdir dir="${tmpdir}" />
			<echo message="@{pkg}: Baue ${location}" />
			<hk.buildparts pkg="@{pkg}" />
			<echo message="@{pkg}: Lösche ${file}" />
			<delete file="${tmpdir}/@{pkg}/${file}" />
			<echo message="@{pkg}: Lösche ${tmpdir}" />
			<delete dir="${tmpdir}" />
		</sequential>
	</macrodef>

	<target name="build-hkshortcuts"
	        description="Builds HkShortcuts in build dir"
	        depends="init,dist-core">
		<copy file="${build.dir}/${hk.file}"
		      todir="${src.dir}/${hk.hkshortcuts.src.name}" />
		<hk.build.component pkg="hkshortcuts" />
		<delete file="${src.dir}/${hk.hkshortcuts.src.name}/${hk.file}" />
	</target>

	<target name="build-hkexplorer"
	        description="Builds HkExplorer in build dir"
	        depends="init,dist-core">
		<copy file="${build.dir}/${hk.file}"
		      todir="${src.dir}/${hk.hkexplorer.src.name}" />
		<hk.build.component pkg="hkexplorer" />
		<delete file="${src.dir}/${hk.hkexplorer.src.name}/${hk.file}" />
	</target>

	<target name="dist-core" depends="build-core">
		<echo message="core: Erstelle ${build.dir}/${hk.file} aus ${hk.commons.file}, ${hk.hktoolkit.file}, ${hk.hkstorage.file}, ${hk.hkreducer.file}, ${hk.hkwindows.file}..." />
		<concat destfile="${build.dir}/${hk.file}" append="false" force="yes">
			<filelist dir="${build.dir}" 
				files="${hk.commons.file},${hk.hktoolkit.file},${hk.hkstorage.file},${hk.hkreducer.file},${hk.hkwindows.file}" />
		</concat>
	</target>

	<target name="build-core"
	        description="Builds HkToolkit's core in build dir"
	        depends="init,build-hkcommons">
		<hk.build.component pkg="hktoolkit" />
		<hk.build.component pkg="hkstorage" />
		<hk.build.component pkg="hkreducer" />
		<hk.build.component pkg="hkwindows" />
	</target>

	<target name="build-hkcommons"
	        description="Builds HkCommons in build dir"
	        depends="init">
		<local name="pkg" />
		<local name="tmpdir" />
		<local name="file" />
		<local name="location" />
		<property name="pkg" value="commons" />
		<echo message="${pkg}: Baue ${pkg}" />
		<cpploc name="tmpdir" from="hk.${pkg}.tmp.dir" />
		<echo message="${pkg}: Erzeuge temporäres Verzeichnis ${tmpdir}..." />
		<mkdir dir="${tmpdir}" />
		<cpprop name="file" from="hk.${pkg}.file" />
		<property name="location" location="${src.dir}/${pkg}" />
		<echo message="${pkg}: Baue ${pkg} in ${location}" />
		<hk.buildparts pkg="${pkg}" />
		<echo message="${pkg}: Lösche ${file}" />
		<delete file="${src.dir}/${pkg}/${file}" />
		<echo message="${pkg}: Lösche ${tmpdir}" />
		<delete dir="${tmpdir}" />
	</target>

	<target name="deploy-hkexplorer" depends="clean,init,dist-hkexplorer">
		<copy file="${dist.dir}/${hk.hkexplorer.file}"
		      todir="${basedir}"
		      overwrite="true" />
	</target>

	<target name="deploy-hkshortcuts" depends="clean,init,dist-hkshortcuts">
		<copy file="${dist.dir}/${hk.hkshortcuts.file}"
		      todir="${basedir}"
		      overwrite="true" />
	</target>

	<target name="dist-hkexplorer" depends="build-hkexplorer">
		<copy file="${build.dir}/${hk.hkexplorer.file}"
		      todir="${dist.dir}"
		      overwrite="true" />
	</target>

	<target name="dist-hkshortcuts" depends="build-hkshortcuts">
		<copy file="${build.dir}/${hk.hkshortcuts.file}"
		      todir="${dist.dir}"
		      overwrite="true" />
	</target>

	<target name="deploy-hktoolkit"
	        depends="clean,init,deploy-hkshortcuts,deploy-hkexplorer">
	</target>

	<target name="dist-hkcore" depends="dist-core">
	</target>

	<target name="dist-hktoolkit" depends="dist-hkshortcuts,dist-hkexplorer">
	</target>

	<target name="build" depends="init" description="Builds files to build dir">
		<property name="result.file" location="${build.dir}/result.js" />
		<echo message="Building ${result.file}" />
		<concat destfile="${result.file}" force="no">
			<!-- Order in which these files are concatenated _IS_ IMPORTANT! -->
			<fileset dir="${src.dir}" includes="*.js" />
			<!--<fileset dir="${src.dir}" includes="some-javascript.js" />
			<fileset dir="${src.dir}" includes="another-javascript.js" />-->
		</concat>
	</target>

	<target name="copy-and-minify-libs"
	        depends="init"
	        description="Minifies all JS files">
		<yui-compressor warn="false"
		                munge="true"
		                jsSuffix=".js"
		                cssSuffix=".css"
		                preserveAllSemiColons="false"
		                fromDir="${build.dir}"
		                toDir="${dist.dir}">
			<include name="*.js" />
		</yui-compressor>
	</target>

</project>